const fs = require('fs');
const path = require('path');

class DataStorage {
  constructor() {
    this.dataDir = path.join(__dirname, 'storage');
    this.bookingsFile = path.join(this.dataDir, 'bookings.json');
    this.memoryStorage = {
      bookings: []
    };
    this.isMemoryMode = false;
    
    this.initializeStorage();
  }

  initializeStorage() {
    try {
      // ÂòóË©¶ÂâµÂª∫Êï∏ÊìöÁõÆÈåÑ
      if (!fs.existsSync(this.dataDir)) {
        fs.mkdirSync(this.dataDir, { recursive: true });
      }

      // ÂòóË©¶ÂâµÂª∫ÊàñËÆÄÂèñÈ†êË®ÇÊñá‰ª∂
      if (!fs.existsSync(this.bookingsFile)) {
        this.saveBookings([]);
      } else {
        // ËÆÄÂèñÁèæÊúâÊï∏Êìö
        const data = this.loadBookings();
        this.memoryStorage.bookings = data;
      }

      console.log('‚úÖ Êï∏ÊìöÂ≠òÂÑ≤ÂàùÂßãÂåñÊàêÂäü (Êñá‰ª∂Ê®°Âºè)');
    } catch (error) {
      console.warn('‚ö†Ô∏è Êñá‰ª∂Â≠òÂÑ≤‰∏çÂèØÁî®ÔºåÂàáÊèõÂà∞ÂÖßÂ≠òÊ®°Âºè:', error.message);
      this.isMemoryMode = true;
      this.memoryStorage.bookings = [];
    }
  }

  loadBookings() {
    try {
      if (this.isMemoryMode) {
        return this.memoryStorage.bookings;
      }

      if (fs.existsSync(this.bookingsFile)) {
        const data = fs.readFileSync(this.bookingsFile, 'utf8');
        const bookings = JSON.parse(data);
        // ÂêåÊ≠•Âà∞ÂÖßÂ≠òÂ≠òÂÑ≤
        this.memoryStorage.bookings = bookings;
        return bookings;
      }
      return [];
    } catch (error) {
      console.error('‚ùå ËÆÄÂèñÈ†êË®ÇÊï∏ÊìöÂ§±Êïó:', error);
      // Â¶ÇÊûúÊñá‰ª∂ËÆÄÂèñÂ§±ÊïóÔºåÂàáÊèõÂà∞ÂÖßÂ≠òÊ®°Âºè
      if (!this.isMemoryMode) {
        console.log('üîÑ ÂàáÊèõÂà∞ÂÖßÂ≠òÂ≠òÂÑ≤Ê®°Âºè');
        this.isMemoryMode = true;
      }
      return this.memoryStorage.bookings;
    }
  }

  saveBookings(bookings) {
    try {
      // ÂßãÁµÇ‰øùÂ≠òÂà∞ÂÖßÂ≠ò
      this.memoryStorage.bookings = bookings;

      // Â¶ÇÊûú‰∏çÊòØÂÖßÂ≠òÊ®°ÂºèÔºåÂòóË©¶‰øùÂ≠òÂà∞Êñá‰ª∂
      if (!this.isMemoryMode) {
        fs.writeFileSync(this.bookingsFile, JSON.stringify(bookings, null, 2));
      }
      
      return true;
    } catch (error) {
      console.error('‚ùå ‰øùÂ≠òÈ†êË®ÇÊï∏ÊìöÂ§±Êïó:', error);
      
      // Â¶ÇÊûúÊñá‰ª∂‰øùÂ≠òÂ§±ÊïóÔºåÂàáÊèõÂà∞ÂÖßÂ≠òÊ®°Âºè‰ΩÜÊï∏Êìö‰∏ç‰∏üÂ§±
      if (!this.isMemoryMode) {
        console.log('üîÑ Êñá‰ª∂‰øùÂ≠òÂ§±ÊïóÔºåÂàáÊèõÂà∞ÂÖßÂ≠òÂ≠òÂÑ≤Ê®°Âºè');
        this.isMemoryMode = true;
      }
      
      return false;
    }
  }

  addBooking(booking) {
    const bookings = this.loadBookings();
    bookings.push(booking);
    return this.saveBookings(bookings);
  }

  updateBooking(id, updatedBooking) {
    const bookings = this.loadBookings();
    const index = bookings.findIndex(booking => booking.id === id);
    
    if (index !== -1) {
      bookings[index] = { ...bookings[index], ...updatedBooking };
      return this.saveBookings(bookings);
    }
    
    return false;
  }

  deleteBooking(id) {
    const bookings = this.loadBookings();
    const filteredBookings = bookings.filter(booking => booking.id !== id);
    
    if (filteredBookings.length !== bookings.length) {
      return this.saveBookings(filteredBookings);
    }
    
    return false;
  }

  getStorageInfo() {
    return {
      mode: this.isMemoryMode ? 'memory' : 'file',
      dataDir: this.dataDir,
      bookingsFile: this.bookingsFile,
      bookingsCount: this.memoryStorage.bookings.length,
      fileExists: !this.isMemoryMode && fs.existsSync(this.bookingsFile)
    };
  }

  // ÂÅ•Â∫∑Ê™¢Êü•
  healthCheck() {
    try {
      const bookings = this.loadBookings();
      return {
        status: 'healthy',
        mode: this.isMemoryMode ? 'memory' : 'file',
        bookingsCount: bookings.length,
        canRead: true,
        canWrite: this.saveBookings(bookings)
      };
    } catch (error) {
      return {
        status: 'unhealthy',
        error: error.message,
        mode: this.isMemoryMode ? 'memory' : 'file'
      };
    }
  }
}

// ÂâµÂª∫ÂñÆ‰æãÂØ¶‰æã
const storage = new DataStorage();

module.exports = storage; 